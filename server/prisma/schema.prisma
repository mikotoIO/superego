datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

generator client {
    // Corresponds to the cargo alias created earlier
    provider = "cargo prisma"
    // The location to generate the client. Is relative to the position of the schema
    output   = "../src/prisma.rs"
}

model Identity {
    id          String       @id @default(uuid()) @db.Uuid
    username    String       @unique @db.String(64)
    userType    String?      @db.String(64)
    displayName String       @db.String(64)
    Credential  Credential[]
    Session     Session[]
    Service     Service[]
}

model Credential {
    id       String   @id @default(uuid()) @db.Uuid
    email    String   @unique @db.String(256)
    passhash String   @db.String(256)
    userId   String   @db.Uuid
    user     Identity @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    id String @id @default(uuid()) @db.Uuid

    token     String    @unique @db.String(256)
    createdAt DateTime  @default(now()) @db.Timestamp
    expiresAt DateTime? @db.Timestamp

    userId String   @db.Uuid
    user   Identity @relation(fields: [userId], references: [id], onDelete: Cascade)

    serviceKeyId String     @db.Uuid
    serviceKey   ServiceKey @relation(fields: [serviceKeyId], references: [id], onDelete: Cascade)
}

model Service {
    id          String      @id @default(uuid()) @db.Uuid
    name        String      @unique @db.String(64)
    description String?     @db.String(256)
    domain      String      @unique @db.String(128)
    ownerID     String?     @db.Uuid
    owner       Identity?   @relation(fields: [ownerID], references: [id])
    ServiceKey  ServiceKey?
}

// The key used to sign the JWTs for a service
model ServiceKey {
    id String @id @default(uuid()) @db.Uuid

    serviceId String  @unique @db.Uuid
    service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    algorithm  String    @db.String(64)
    domain     String    @unique @db.String(128)
    signingKey String    @db.String(1024)
    publicKey  String?   @db.String(1024)
    Session    Session[]
}
